name: Validate Pull Request

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - develop

jobs:
  validate-pr:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Configure branch
      - name: Determine the correct branch
        run: |
          # Determine the correct branch
          BRANCH_NAME=$(git symbolic-ref --short HEAD || echo ${{ github.head_ref }})
          if [[ -z "$BRANCH_NAME" ]]; then
          echo "Unable to determine branch name. Exiting."
          exit 1
          fi
          echo "Detected branch: $BRANCH_NAME"
          
          # Fetch the latest changes from the remote repository
          git fetch origin
          git reset --hard origin/"$BRANCH_NAME"
          
          git checkout "$BRANCH_NAME"
          git pull origin "$BRANCH_NAME" || echo "Branch is already up-to-date."
          
          # Extract branch name as CURRENT_BRANCH
          echo "CURRENT_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      # 3. Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 4. Run Gradle Build
      #- name: Run Gradle build
      #  run: |
          # Build project
      #    ./gradlew clean build

      # 5. Increment versionCode and versionName (Only after a successful build)
      - name: Increment Version Code and Name
        if: success() # This step runs only if the previous steps succeed
        run: |
          # We reset the version upload in the build so that two versions are not uploaded at once
          git reset --hard
          
          # Increment the version (if not on 'master') and print the Version Name
          ./gradlew printVersionName
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          echo "Files staged for commit:"
          git status --short
          git commit -m "Increment versionCode and versionName"

          git push origin "${CURRENT_BRANCH}" || echo "No changes to push"

      # 6. Run Unit Tests
      - name: Run tests
        run: ./gradlew test

      # 7. Run Lint Check
      - name: Run Lint
        run: ./gradlew lint

      # 8. Update Badge
      - name: Update Badge
        if: always() # We make sure it always runs, even in case of workflow error
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            sed -i "s|!\[STATUS\](.*)|![STATUS](https://img.shields.io/badge/Status-Working-25d812)|" README.md
          else
            sed -i "s|!\[STATUS\](.*)|![STATUS](https://img.shields.io/badge/Status-Failing-dd0f00)|" README.md
          fi
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          echo "Files staged for commit:"
          git status --short
          git commit -m "Update status badge in README.md" || echo "No changes to commit"
                 
          echo "Pushing changes to branch: $BRANCH_NAME"
          git push origin "${CURRENT_BRANCH}" || echo "No changes to push"
