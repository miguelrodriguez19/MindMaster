name: Update README and Release

on:
  workflow_run:
    workflows:
      - Validate Pull Request
    types:
      - completed

jobs:
  update-readme-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Ensure Validate Pull Request succeeded
      - name: Check Validate Pull Request Status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: validate-status
        run: |
          STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status \
            | jq -r '.statuses[] | select(.context == "validate-pr") | .state')

          echo "Validate PR Status: $STATUS"

          if [ "$STATUS" != "success" ]; then
            echo "Validate Pull Request did not succeed. Exiting..."
            exit 1
          fi

      # 3. Java's configuration to read Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 4. Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 5. Build and validate
      - name: Run Gradle build
        run: ./gradlew clean build --stacktrace

      # 6. Extract versionName from build.gradle
      - name: Extract versionName
        id: extract_version
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName)
          echo "Extracted VERSION_NAME=$VERSION_NAME"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # 7 Create Git Tag
      - name: Create Git Tag
        id: create_tag
        run: |
          # Set up Git identity
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Determine the tag name
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
              TAG_NAME="v${VERSION_NAME}_Beta"
          else
              TAG_NAME="v${VERSION_NAME}"
          fi
          
          echo "GITHUB_REF:${GITHUB_REF}"
          echo "TAG_NAME before creating tag:${TAG_NAME}"
          
          # Check if the tag already exists in the remote repository
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
              echo "Tag $TAG_NAME already exists in the remote repository. Skipping tag creation."
          else
              git tag -a "$TAG_NAME" -m "Release version $VERSION_NAME"
              git push origin "$TAG_NAME"
          fi

          # Export the tag name for later use
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # 8. Update README.md with the latest tag
      - name: Update README.md with latest tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Updating README with tag: $LATEST_TAG"
          if [[ $LATEST_TAG == *"_Beta" ]]; then
              sed -i "s|\\[VERSION\\](.*)|[VERSION](https://img.shields.io/badge/Version-${LATEST_TAG//v/}-blue)|" README.md
          else
              sed -i "s|\\[VERSION\\](.*)|[VERSION](https://img.shields.io/badge/Version-${LATEST_TAG//v/}-blue)|" README.md
          fi
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update README.md with tag $LATEST_TAG" || echo "No changes to commit"
          git push || echo "Nothing to push"

      # 9. Create GitHub Release
      - name: Create GitHub Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/create-release@v1
        with:
          tag_name: "v$VERSION_NAME"
          release_name: "Release v$VERSION_NAME"
          body: |
            ## [v$VERSION_NAME] - $(date +'%Y-%m-%d')
            
            ### Changed
            - Updated version to $VERSION_NAME

          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}