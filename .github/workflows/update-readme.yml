name: Update README and Release

on:
  workflow_run:
    workflows:
      - Validate Pull Request
    types:
      - completed

jobs:
  update-readme-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 1.1 Fetch the latest changes
      - name: Fetch latest changes
        run: |
          # Determine the correct branch
          BRANCH_NAME=$(git symbolic-ref --short HEAD || echo ${{ github.event.workflow_run.head_branch }})
          echo "Fetching changes. Branch name: $BRANCH_NAME"

          git fetch origin
          git reset --hard origin/"$BRANCH_NAME"

      # 2. Java's configuration to read Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 3. Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 4. Extract versionName from build.gradle
      - name: Extract versionName
        id: extract_version
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName)
          echo "Extracted VERSION_NAME=$VERSION_NAME"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # 5. Create Git Tag
      - name: Create Git Tag
        id: create_tag
        run: |
          CURRENT_BRANCH="${{ github.event.workflow_run.head_branch }}"
          echo "CURRENT_BRANCH: $CURRENT_BRANCH"
          
          TAG_NAME="v${VERSION_NAME}
          if [[ "$CURRENT_BRANCH" == "develop" ]]; then
              TAG_NAME="v${VERSION_NAME}_Beta"
          fi

          echo "TAG_NAME before creating tag: $TAG_NAME"

          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
              echo "Tag $TAG_NAME already exists in the remote repository. Skipping tag creation."
          else
              git tag -a "$TAG_NAME" -m "Release version $VERSION_NAME"
              git push origin "$TAG_NAME"
          fi

          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # 6. Update README.md with the latest tag
      - name: Update README.md with latest tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Updating README with tag: $LATEST_TAG"
          sed -i "s|!\[VERSION\](.*)|![VERSION](https://img.shields.io/badge/Version-${LATEST_TAG//v/}-blue)|" README.md
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          echo "Files staged for commit:"
          git status --short
          git commit -m "Update README.md with tag $LATEST_TAG" || echo "No changes to commit"

      # 7. Push changes to the current branch (e.g., develop)
      - name: Push changes
        run: |          
          # Determine the correct branch
          CURRENT_BRANCH=$(git symbolic-ref --short HEAD || echo ${{ github.event.workflow_run.head_branch }})
          echo "Pushing changes to branch: $CURRENT_BRANCH"

          git push origin "$CURRENT_BRANCH" || echo "Nothing to push"

      # 8. Create GitHub Release
      - name: Create GitHub Release
        if: ${{ github.event.workflow_run.head_branch == 'master' }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.VERSION_NAME }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
