name: Update README and Release

on:
  workflow_run:
    workflows:
      - Validate Pull Request
    types:
      - completed

jobs:
  update-readme-and-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository with full history and tags
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Java's configuration to read Gradle
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 3. Grant execute permission to gradlew
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      # 4. Extract versionName from build.gradle
      - name: Extract versionName
        id: extract_version
        run: |
          VERSION_NAME=$(./gradlew -q printVersionName)
          echo "Extracted VERSION_NAME=$VERSION_NAME"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # 5 Create Git Tag
      - name: Create Git Tag
        id: create_tag
        run: |
          # Set up Git identity
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git fetch --tags
          
          echo "GITHUB_REF:${GITHUB_REF}"
          TAG_NAME="v${{ env.VERSION_NAME }}"
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            TAG_NAME="${TAG_NAME}_Beta"
          fi
          
          echo "Checking if tag $TAG_NAME exists..."
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Tag $TAG_NAME already exists. Skipping."
          else
            echo "Creating tag $TAG_NAME"
            git tag -a "$TAG_NAME" -m "Release version $TAG_NAME"
            git push origin "$TAG_NAME"
          fi
          
          echo "TAG_NAME after creating tag:${TAG_NAME}"
                    
          # Export the tag name for later use
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      # 6. Update README.md with the latest tag
      - name: Update README.md with latest tag
        run: |
          # Fetch the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found. Skipping update."
            exit 0
          fi

          echo "Updating README with tag: $LATEST_TAG"

          # Update the badge in README.md
          sed -i "s|!\[VERSION\](.*)|![VERSION](https://img.shields.io/badge/Version-${LATEST_TAG//v/}-blue)|" README.md

          # Commit and push the changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          
          echo "Files staged for commit:"
          git status --short
          git commit -m "Update README.md with tag $LATEST_TAG" || echo "No changes to commit"
          git push || echo "Nothing to push"
          
          # Export the latest tag used to coordinate with the release
          echo "LATEST_TAG=LATEST_TAG" >> $GITHUB_ENV

      # 7. Create GitHub Release
      - name: Create GitHub Release
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: Release ${{ env.LATEST_TAG }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
