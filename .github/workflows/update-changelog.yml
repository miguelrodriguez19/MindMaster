name: Update CHANGELOG.md

on:
  workflow_run:
    workflows:
      - Update README and Release
    types:
      - completed

jobs:
  update-changelog:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Check if ref is master and update it
      - name: Check Github Ref
        run: |
          CURRENT_BRANCH="${{ github.event.workflow_run.head_branch }}"
          echo "CURRENT_BRANCH: $CURRENT_BRANCH"
          
          if [[ "$CURRENT_BRANCH" != "master" ]]; then
            echo "Ref is not master, its ${GITHUB_REF}. Skipping update."
            exit 0
          fi
          
          git fetch origin
          git reset --hard origin/master

      # 3. Set up GitHub CLI with GH_TOKEN
      - name: Set up GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # 4. Retrieve the latest release and update CHANGELOG.md
      - name: Update CHANGELOG.md with latest release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release tag and body
          LATEST_RELEASE=$(gh release view --json tagName -q ".tagName")
          RELEASE_BODY=$(gh release view --json body -q ".body")

          if [ -z "$LATEST_RELEASE" ]; then
            echo "No release tag found. Skipping update."
            exit 0
          fi

          if [ -z "$RELEASE_BODY" ]; then
            RELEASE_BODY="No detailed description provided for this release."
          fi

          echo "Latest Release: $LATEST_RELEASE"

          # Get the current date
          RELEASE_DATE=$(date +%Y-%m-%d)

          # Prepare the new changelog entry
          NEW_ENTRY="\n## [$LATEST_RELEASE] - $RELEASE_DATE\n\n$RELEASE_BODY\n\n"

          # Find the correct line to insert the new entry
          INSERT_LINE=$(grep -n '^## ' CHANGELOG.md | head -n 1 | cut -d ':' -f 1)
          if [ -z "$INSERT_LINE" ]; then
            echo "No suitable header found in CHANGELOG.md. Skipping update."
            exit 0
          fi

          sed -i "${INSERT_LINE}a $NEW_ENTRY" CHANGELOG.md

          # Commit and push changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          echo "Files staged for commit:"
          git status --short
          git commit -m "Update CHANGELOG.md for release $LATEST_RELEASE" || echo "No changes to commit"
          git push origin master
